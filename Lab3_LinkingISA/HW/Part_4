instruction:
r8 = ((r9 * r10 + r8 * r11) & (r12 * r13));

3-operand implementation:
    imulq %r9, %r10, %rax
    imulq %r8, %r11, %rbx
    addq %rax, %rbx, %rbx
    imulq %r12, %r13, %rax
    andq %rax, %rbx, %r8

2-operand naiive translation:
    movq %r10, %rax
    imulq %r9, %rax
    movq %r11, %rbx
    imulq %r8, %rbx
    addq %rax, %rbx
    movq %r13, %rax
    imulq %r12, %rax
    movq %rbx, %r8
    andq %rax, %r8

my translation:
# r10 * r9 -> rax
movq %r10, %rax
imulq %r9, %rax
# r11 * r8 -> rbx
movq %r11, %rbx
imulq %r8, %rbx
# add rax to rbx
addq %rax, %rbx
# r12 * r13 -> r8
movq %r12, %r8
imulq %r13, %r8
# r8 = (r9 * r10 + r8 * r11) AND (r12 * r13)
andq %rbx, %r8